---
- name: Gather AWS EC2 instances
  community.aws.ec2_instance_info:
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
  register: aws_ec2_instances

- name: Filter instances based on target_vms
  set_fact:
    filtered_vms: "{{ aws_ec2_instances.instances | selectattr('name', 'in', target_vms) | list }}"
  when: target_vms | length > 0
  register: target_vm_filter

- name: Set filtered_vms to all instances if target_vms is empty or undefined
  set_fact:
    filtered_vms: "{{ aws_ec2_instances.instances }}"
  when: not target_vm_filter.changed

- name: Analyze EC2 instance hardware types and assign flavors
  set_fact:
    flavor_size: "{{ lookup('template', 'instance_flavor_size.j2') }}"
  loop: "{{ filtered_vms }}"
  loop_control:
    loop_var: vm
  register: flavor_sizes

- name: Create OpenStack flavors from analysis
  openstack.cloud.flavor:
    name: "{{ item.flavor_size }}"
    ram: "{{ (item.vm.memory_mb | default(item.vm.memory)) // 1024 }}"
    vcpus: "{{ item.vm.vcpu }}"
    state: present
    auth:
      auth_url: "{{ openstack_auth_url }}"
      username: "{{ openstack_username }}"
      password: "{{ openstack_password }}"
      project_name: "{{ openstack_project_name }}"
      user_domain_name: "{{ openstack_user_domain_name }}"
      project_domain_name: "{{ openstack_project_domain_name }}"
  loop: "{{ flavor_sizes.results }}"
  loop_control:
    loop_var: item

- name: Debug output of EC2 instances analyzed and matched flavor types
  debug:
    msg: "Number of EC2 instances analyzed for {{ item.flavor_size }}: {{ flavor_sizes.results | selectattr('flavor_size', 'equalto', item.flavor_size) | list | count }}"
  loop: "{{ instance_types }}"
  loop_control:
    loop_var: item
